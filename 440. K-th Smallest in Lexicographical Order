//-------C++------
class Solution {
 public:
  int calSteps(int n, long n1, long n2) {
    int steps = 0;
    while (n1 <= n) {
      steps += min((long)n + 1, n2) - n1;
      n1 *= 10;
      n2 *= 10;
    }
    return steps;
  }

  int findKthNumber(int n, int k) {
    int curr = 1;
    k = k - 1;  // We start counting from 1, so decrement k by 1
    while (k > 0) {
      int steps = calSteps(n, curr, curr + 1);
      if (steps <= k) {
        curr += 1;   // Move to the next number in the same level
        k -= steps;  // Decrease k by the number of steps taken
      } else {
        curr *= 10;  // Move to the next level (first child of the current number)
        k -= 1;      // Account for moving down one level
      }
    }
    return curr;
  }
};

//------Java------
class Solution {
    public int calSteps(int n, long n1, long n2) {
        int steps = 0;
        while (n1 <= n) {
            steps += (int) Math.min((long) n + 1, n2) - (int) n1;
            n1 *= 10;
            n2 *= 10;
        }
        return steps;
    }

    public int findKthNumber(int n, int k) {
        int curr = 1;
        k = k - 1;  // We start counting from 1, so decrement k by 1
        while (k > 0) {
            int steps = calSteps(n, curr, curr + 1);
            if (steps <= k) {
                curr += 1;   // Move to the next number in the same level
                k -= steps;  // Decrease k by the number of steps taken
            } else {
                curr *= 10;  // Move to the next level (first child of the current number)
                k -= 1;      // Account for moving down one level
            }
        }
        return curr;
    }
}

#------Python------
class Solution:
    def calSteps(self, n: int, n1: int, n2: int) -> int:
        steps = 0
        while n1 <= n:
            steps += min(n + 1, n2) - n1
            n1 *= 10
            n2 *= 10
        return steps

    def findKthNumber(self, n: int, k: int) -> int:
        curr = 1
        k -= 1  # We start counting from 1, so decrement k by 1
        while k > 0:
            steps = self.calSteps(n, curr, curr + 1)
            if steps <= k:
                curr += 1   # Move to the next number in the same level
                k -= steps  # Decrease k by the number of steps taken
            else:
                curr *= 10  # Move to the next level (first child of the current number)
                k -= 1      # Account for moving down one level
        return curr


//------JavaScript------
class Solution {
    calSteps(n, n1, n2) {
        let steps = 0;
        while (n1 <= n) {
            steps += Math.min(n + 1, n2) - n1;
            n1 *= 10;
            n2 *= 10;
        }
        return steps;
    }

    findKthNumber(n, k) {
        let curr = 1;
        k = k - 1;  // We start counting from 1, so decrement k by 1
        while (k > 0) {
            const steps = this.calSteps(n, curr, curr + 1);
            if (steps <= k) {
                curr += 1;   // Move to the next number in the same level
                k -= steps;  // Decrease k by the number of steps taken
            } else {
                curr *= 10;  // Move to the next level (first child of the current number)
                k -= 1;      // Account for moving down one level
            }
        }
        return curr;
    }
}

//------TypeScript------
class Solution {
    private calSteps(n: number, n1: number, n2: number): number {
        let steps = 0;
        while (n1 <= n) {
            steps += Math.min(n + 1, n2) - n1;
            n1 *= 10;
            n2 *= 10;
        }
        return steps;
    }

    public findKthNumber(n: number, k: number): number {
        let curr = 1;
        k = k - 1;  // We start counting from 1, so decrement k by 1
        while (k > 0) {
            const steps = this.calSteps(n, curr, curr + 1);
            if (steps <= k) {
                curr += 1;   // Move to the next number in the same level
                k -= steps;  // Decrease k by the number of steps taken
            } else {
                curr *= 10;  // Move to the next level (first child of the current number)
                k -= 1;      // Account for moving down one level
            }
        }
        return curr;
    }
}

