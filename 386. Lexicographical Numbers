//-------C++------
class Solution {
public:
    vector<int> lexicalOrder(int n) {
        vector<int> res(n);
        int cur = 1;
        for (int i = 0; i < n; i++) {
            res[i] = cur;
            if (cur * 10 <= n) {
                cur *= 10;
            } else {
                if (cur >= n) 
                    cur /= 10;
                cur += 1;
                while (cur % 10 == 0)
                    cur /= 10;
            }
        }
        return res;
    }
};

//------Java------
import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<Integer> lexicalOrder(int n) {
        List<Integer> res = new ArrayList<>(n);
        int cur = 1;
        for (int i = 0; i < n; i++) {
            res.add(cur);
            if (cur * 10 <= n) {
                cur *= 10;
            } else {
                if (cur >= n) 
                    cur /= 10;
                cur += 1;
                while (cur % 10 == 0)
                    cur /= 10;
            }
        }
        return res;
    }
}

#------Python------
class Solution:
    def lexicalOrder(self, n: int) -> list[int]:
        res = []
        cur = 1
        for _ in range(n):
            res.append(cur)
            if cur * 10 <= n:
                cur *= 10
            else:
                if cur >= n:
                    cur //= 10
                cur += 1
                while cur % 10 == 0:
                    cur //= 10
        return res

//------JavaScript------
class Solution {
    lexicalOrder(n) {
        const res = [];
        let cur = 1;
        for (let i = 0; i < n; i++) {
            res.push(cur);
            if (cur * 10 <= n) {
                cur *= 10;
            } else {
                if (cur >= n) 
                    cur = Math.floor(cur / 10);
                cur += 1;
                while (cur % 10 === 0)
                    cur = Math.floor(cur / 10);
            }
        }
        return res;
    }
}

//------TypeScript------
class Solution {
    lexicalOrder(n: number): number[] {
        const res: number[] = [];
        let cur = 1;
        for (let i = 0; i < n; i++) {
            res.push(cur);
            if (cur * 10 <= n) {
                cur *= 10;
            } else {
                if (cur >= n) 
                    cur = Math.floor(cur / 10);
                cur += 1;
                while (cur % 10 === 0)
                    cur = Math.floor(cur / 10);
            }
        }
        return res;
    }
}
